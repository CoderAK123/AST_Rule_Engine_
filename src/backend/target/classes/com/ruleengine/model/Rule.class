// Source code is decompiled from a .class file using FernFlower decompiler.
package com.ruleengine.model;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;
import lombok.Generated;

@Entity
public class Rule {
   @Id
   @GeneratedValue(
      strategy = GenerationType.IDENTITY
   )
   private Long id;
   private String name;
   private String ruleString;
   @OneToOne(
      cascade = {CascadeType.ALL}
   )
   private ASTNode ast;

   @Generated
   public Long getId() {
      return this.id;
   }

   @Generated
   public String getName() {
      return this.name;
   }

   @Generated
   public String getRuleString() {
      return this.ruleString;
   }

   @Generated
   public ASTNode getAst() {
      return this.ast;
   }

   @Generated
   public void setId(final Long id) {
      this.id = id;
   }

   @Generated
   public void setName(final String name) {
      this.name = name;
   }

   @Generated
   public void setRuleString(final String ruleString) {
      this.ruleString = ruleString;
   }

   @Generated
   public void setAst(final ASTNode ast) {
      this.ast = ast;
   }

   @Generated
   public boolean equals(final Object o) {
      if (o == this) {
         return true;
      } else if (!(o instanceof Rule)) {
         return false;
      } else {
         Rule other = (Rule)o;
         if (!other.canEqual(this)) {
            return false;
         } else {
            label59: {
               Object this$id = this.getId();
               Object other$id = other.getId();
               if (this$id == null) {
                  if (other$id == null) {
                     break label59;
                  }
               } else if (this$id.equals(other$id)) {
                  break label59;
               }

               return false;
            }

            Object this$name = this.getName();
            Object other$name = other.getName();
            if (this$name == null) {
               if (other$name != null) {
                  return false;
               }
            } else if (!this$name.equals(other$name)) {
               return false;
            }

            Object this$ruleString = this.getRuleString();
            Object other$ruleString = other.getRuleString();
            if (this$ruleString == null) {
               if (other$ruleString != null) {
                  return false;
               }
            } else if (!this$ruleString.equals(other$ruleString)) {
               return false;
            }

            Object this$ast = this.getAst();
            Object other$ast = other.getAst();
            if (this$ast == null) {
               if (other$ast != null) {
                  return false;
               }
            } else if (!this$ast.equals(other$ast)) {
               return false;
            }

            return true;
         }
      }
   }

   @Generated
   protected boolean canEqual(final Object other) {
      return other instanceof Rule;
   }

   @Generated
   public int hashCode() {
      int PRIME = true;
      int result = 1;
      Object $id = this.getId();
      result = result * 59 + ($id == null ? 43 : $id.hashCode());
      Object $name = this.getName();
      result = result * 59 + ($name == null ? 43 : $name.hashCode());
      Object $ruleString = this.getRuleString();
      result = result * 59 + ($ruleString == null ? 43 : $ruleString.hashCode());
      Object $ast = this.getAst();
      result = result * 59 + ($ast == null ? 43 : $ast.hashCode());
      return result;
   }

   @Generated
   public String toString() {
      String var10000 = String.valueOf(this.getId());
      return "Rule(id=" + var10000 + ", name=" + this.getName() + ", ruleString=" + this.getRuleString() + ", ast=" + String.valueOf(this.getAst()) + ")";
   }

   @Generated
   public Rule() {
   }
}
