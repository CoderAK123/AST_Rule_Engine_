// Source code is decompiled from a .class file using FernFlower decompiler.
package com.ruleengine.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import lombok.Generated;

@Entity
public class ASTNode {
   @Id
   @GeneratedValue(
      strategy = GenerationType.IDENTITY
   )
   private Long id;
   private String type;
   private String operator;
   private String field;
   private String value;
   @ManyToOne
   private ASTNode left;
   @ManyToOne
   private ASTNode right;

   @Generated
   public Long getId() {
      return this.id;
   }

   @Generated
   public String getType() {
      return this.type;
   }

   @Generated
   public String getOperator() {
      return this.operator;
   }

   @Generated
   public String getField() {
      return this.field;
   }

   @Generated
   public String getValue() {
      return this.value;
   }

   @Generated
   public ASTNode getLeft() {
      return this.left;
   }

   @Generated
   public ASTNode getRight() {
      return this.right;
   }

   @Generated
   public void setId(final Long id) {
      this.id = id;
   }

   @Generated
   public void setType(final String type) {
      this.type = type;
   }

   @Generated
   public void setOperator(final String operator) {
      this.operator = operator;
   }

   @Generated
   public void setField(final String field) {
      this.field = field;
   }

   @Generated
   public void setValue(final String value) {
      this.value = value;
   }

   @Generated
   public void setLeft(final ASTNode left) {
      this.left = left;
   }

   @Generated
   public void setRight(final ASTNode right) {
      this.right = right;
   }

   @Generated
   public boolean equals(final Object o) {
      if (o == this) {
         return true;
      } else if (!(o instanceof ASTNode)) {
         return false;
      } else {
         ASTNode other = (ASTNode)o;
         if (!other.canEqual(this)) {
            return false;
         } else {
            label95: {
               Object this$id = this.getId();
               Object other$id = other.getId();
               if (this$id == null) {
                  if (other$id == null) {
                     break label95;
                  }
               } else if (this$id.equals(other$id)) {
                  break label95;
               }

               return false;
            }

            Object this$type = this.getType();
            Object other$type = other.getType();
            if (this$type == null) {
               if (other$type != null) {
                  return false;
               }
            } else if (!this$type.equals(other$type)) {
               return false;
            }

            Object this$operator = this.getOperator();
            Object other$operator = other.getOperator();
            if (this$operator == null) {
               if (other$operator != null) {
                  return false;
               }
            } else if (!this$operator.equals(other$operator)) {
               return false;
            }

            label74: {
               Object this$field = this.getField();
               Object other$field = other.getField();
               if (this$field == null) {
                  if (other$field == null) {
                     break label74;
                  }
               } else if (this$field.equals(other$field)) {
                  break label74;
               }

               return false;
            }

            label67: {
               Object this$value = this.getValue();
               Object other$value = other.getValue();
               if (this$value == null) {
                  if (other$value == null) {
                     break label67;
                  }
               } else if (this$value.equals(other$value)) {
                  break label67;
               }

               return false;
            }

            Object this$left = this.getLeft();
            Object other$left = other.getLeft();
            if (this$left == null) {
               if (other$left != null) {
                  return false;
               }
            } else if (!this$left.equals(other$left)) {
               return false;
            }

            Object this$right = this.getRight();
            Object other$right = other.getRight();
            if (this$right == null) {
               if (other$right != null) {
                  return false;
               }
            } else if (!this$right.equals(other$right)) {
               return false;
            }

            return true;
         }
      }
   }

   @Generated
   protected boolean canEqual(final Object other) {
      return other instanceof ASTNode;
   }

   @Generated
   public int hashCode() {
      int PRIME = true;
      int result = 1;
      Object $id = this.getId();
      result = result * 59 + ($id == null ? 43 : $id.hashCode());
      Object $type = this.getType();
      result = result * 59 + ($type == null ? 43 : $type.hashCode());
      Object $operator = this.getOperator();
      result = result * 59 + ($operator == null ? 43 : $operator.hashCode());
      Object $field = this.getField();
      result = result * 59 + ($field == null ? 43 : $field.hashCode());
      Object $value = this.getValue();
      result = result * 59 + ($value == null ? 43 : $value.hashCode());
      Object $left = this.getLeft();
      result = result * 59 + ($left == null ? 43 : $left.hashCode());
      Object $right = this.getRight();
      result = result * 59 + ($right == null ? 43 : $right.hashCode());
      return result;
   }

   @Generated
   public String toString() {
      String var10000 = String.valueOf(this.getId());
      return "ASTNode(id=" + var10000 + ", type=" + this.getType() + ", operator=" + this.getOperator() + ", field=" + this.getField() + ", value=" + this.getValue() + ", left=" + String.valueOf(this.getLeft()) + ", right=" + String.valueOf(this.getRight()) + ")";
   }

   @Generated
   public ASTNode() {
   }
}
